{"version":3,"sources":["config.js","images/man.svg","images/computer.svg","images/3d_glasses.svg","images/speak_and_spell.svg","images/recorder.svg","images/simon.svg","images/moon.svg","components/clock.js","components/startbar.js","components/toolbar.js","components/message.js","components/messenger.js","components/program.js","components/work.js","components/contact.js","components/shutDown.js","App.js","registerServiceWorker.js","index.js"],"names":["bot","require","email","icons","chat","url","alt","work","contact","shutdown","module","exports","apps","messenger","resumeLink","content","emailLink","linkedin","github","title","copy","dialogFlow","token","initialResponse","changeInputResponse","free","options","__webpack_require__","p","Clock","state","time","startTime","today","Date","hh","getHours","m","getMinutes","_this","checkTime","dd","h","setTimeout","setState","concat","this","i","react_default","a","createElement","className","PureComponent","StartBar","_ref","openApp","openApps","shutDown","start","openStart","minimizedApps","updateStartbar","currentlyActiveApp","nextStatus","react","onClick","src","flag","Object","keys","map","app","toLowerCase","key","indexOf","e","components_clock","computer","defaultProps","Toolbar","image","closeApp","component","notificationStyle","bind","Message","type","user","Linkify_default","Messenger","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","triggerFirstMessage","updateHistory","botName","isTyping","curatedOptions","objectSpread","visible","handleResponse","response","result","fulfillment","messages","message","speech","length","payload","includes","base","find","item","responses","delay","_loop","Math","floor","random","moreOptions","links","sendMessage","event","directValue","arguments","undefined","keyCode","which","inputValue","username","window","dataLayer","push","client","textRequest","then","catch","handleError","handleInputChange","target","value","changeInput","option","chatHistory","ApiAiClient","accessToken","_this2","scrollTop","scrollHeight","_this3","_this$props","props","updateActiveApp","previouslyActiveApp","_this$state","dataView","react_draggable_default","defaultPosition","x","y","handle","data-view","components_toolbar","ref","input","react_transition_group","index","timeout","classNames","link","replace","id","autoFocus","onChange","onKeyPress","Component","Program","programName","programIcon","programRights","contentEditable","suppressContentEditableWarning","children","Work","components_program","href","Contact","ShutDown","restart","programComponents","App","linkClickListener","tagName","openInNewTab","preventDefault","splice","filter","minimizeWindow","status","elem","win","open","focus","document","addEventListener","attachEvent","_this$state2","rel","resume","program","ProgramBlock","components_startbar","components_shutDown","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","fetch","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e4ca9561.chunk.js","sourcesContent":["const bot = require(\"./images/speak_and_spell.svg\");\nconst email = require(\"./images/recorder.svg\");\nconst briefcase = require(\"./images/simon.svg\");\nconst moon = require(\"./images/moon.svg\");\n\nconst apps = {\n    messenger: \"Chat\",\n    work: \"Work\",\n    contact: \"Contact\",\n    shutdown: \"Shutdown\"\n};\n\nconst icons = {\n    chat: {\n        url: bot,\n        alt: \"Icon of bot\"\n    },\n    work: {\n        url: briefcase,\n        alt: \"Icon of briefcase\"\n    },\n    contact: {\n        url: email,\n        alt: \"Icon of email\"\n    },\n    shutdown: {\n        url: moon,\n        alt: \"Icon of moon\"\n    }\n};\n\nconst resumeLink =\n    \"https://drive.google.com/file/d/1gRiwdQfVXiCPSMzgcAkZkT-zDAs0FJN-/view?usp=sharing\";\n\nconst contact = {\n    content: \"Let's chat and collaborate!\",\n    emailLink: \"mailto:gugi.gumilang@gmail.com\",\n    linkedin: \"https://linkedin.com/in/gugigumilang\",\n    github: \"http://github.com/gugiguger\"\n};\n\nconst work = [\n    {\n        title: \"Tekatekikota\",\n        url: \"https://github.com/gugiguger/tekatekikota\",\n        copy:\n            \"A simple react app that walks players through a scavenger hunt I set up in Jakarta, Indonesia as part of airbnb experience\"\n    },\n    {\n        title: \"Class of '85\",\n        url: \"https://github.com/gugiguger/Classof85\",\n        copy:\n            \"Class of 85 is social network app for students who wants to keep in touch within their classmates after graduation. I built it with BIOS theme style for the nostalgic look.\"\n    },\n    {\n        title: \"This is Home\",\n        url: \"https://thisishome.herokuapp.com\",\n        copy:\n            \"A simple react app that walks player through a choose adventure game with the plot of journey of migrants from Germany to Syria.\"\n    },\n    {\n        title: \"Plant Marriage Petition\",\n        url: \"https://github.com/gugiguger/plantmarriagepetition\",\n        copy:\n            \"All through out history men and women have had their heart broken by another person. Plants was there for them as a comfort and never judged their appearance. It's only natural that we would fall in love with plants. Love is love. Sign the petition and make plants marriage legal today!\"\n    },\n    {\n        title: \"Gugergram\",\n        url: \"https://github.com/gugiguger/gugergram\",\n        copy:\n            \"Gugergram is an imageboard app for comic lovers who to share their favorites comic's cover within the community they can upload image and also put comment.\"\n    }\n];\n\nconst initialResponse =\n    'Hi there, welcome to my portfolio, I\\'m Gugi and Thanks for stopping by for a chat. You can ask me anything using the \"Free type\" button below, but for now I made you some quick select options to help get you started. Go ahead and ask me something!';\n\nconst changeInputResponse = {\n    free: \"Feel free to ask me anything.\",\n    options: \"A little guidance never hurt anybody :)\"\n};\n\nconst dialogFlow = {\n    token: \"0520d9a70397490fa0524084350fbf48\"\n};\n\nmodule.exports = {\n    apps,\n    icons,\n    resumeLink,\n    contact,\n    work,\n    dialogFlow,\n    initialResponse,\n    changeInputResponse\n};\n","module.exports = __webpack_public_path__ + \"static/media/man.0886fd8b.svg\";","module.exports = __webpack_public_path__ + \"static/media/computer.4e1f9d23.svg\";","module.exports = __webpack_public_path__ + \"static/media/3d_glasses.5533042c.svg\";","module.exports = __webpack_public_path__ + \"static/media/speak_and_spell.8a7a3fd2.svg\";","module.exports = __webpack_public_path__ + \"static/media/recorder.564bb67f.svg\";","module.exports = __webpack_public_path__ + \"static/media/simon.46806655.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.1d0c5f93.svg\";","import React, { PureComponent } from 'react'\n\nimport '../css/clock.css'\n\nclass Clock extends PureComponent {\n  state = {\n    time: ''\n  }\n\n  componentDidMount() {\n    this.startTime()\n  }\n\n  checkTime(i) {\n    return i < 10 ? i = '0' + i : i\n  }\n\n  startTime = () => {\n    const today = new Date()\n    const hh = today.getHours()\n\n    let m = today.getMinutes()\n    m = this.checkTime(m)\n\n    let dd = 'AM'\n\n    let h = hh\n    if (h >= 12) {\n      h = hh - 12\n      dd = 'PM'\n    }\n    if (h === 0) {\n      h = 12\n    }\n\n    setTimeout(this.startTime, 1000)\n\n    this.setState({ time: `${h}:${m} ${dd}` })\n  }\n\n  render() {\n    return (\n      <div className=\"clock\">{this.state.time}</div>\n    )\n  }\n}\n\nexport default Clock\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { apps, icons } from \"../config\";\n\n// Components\nimport Clock from \"./clock\";\n\nimport \"../css/startbar.css\";\n\n// Assets\nimport flag from \"../images/man.svg\";\nimport computer from \"../images/computer.svg\";\n\nconst StartBar = ({\n    openApp,\n    openApps,\n    shutDown,\n    start,\n    openStart,\n    minimizedApps,\n    updateStartbar,\n    currentlyActiveApp\n}) => {\n    const nextStatus = openStart ? \"close\" : \"open\";\n\n    return (\n        <Fragment>\n            <div className=\"startbar\">\n                <button\n                    className={`start button ${openStart ? \"active\" : \"\"}`}\n                    onClick={() => start(nextStatus)}\n                >\n                    <img src={flag} alt=\"flag\" />\n                    <span>Gugi Gumilang</span>\n                </button>\n                <div className=\"programs\">\n                    {Object.keys(apps).map((app, i) => {\n                        const className = apps[app].toLowerCase();\n\n                        if (app === \"shutdowncomputer\") return null;\n\n                        return (\n                            <button\n                                key={i}\n                                className={`\n                    startbar-button startbar-{className} button\n                    ${\n                        currentlyActiveApp.indexOf(className) > -1\n                            ? \"active\"\n                            : \"\"\n                    }\n                    ${\n                        openApps.indexOf(className) === -1\n                            ? \"closed-program\"\n                            : \"\"\n                    } ${\n                                    minimizedApps.indexOf(className) === -1\n                                        ? \"minimized-program\"\n                                        : \"\"\n                                }`}\n                                onClick={e => updateStartbar(className)}\n                            >\n                                <img\n                                    src={icons[className].url}\n                                    alt={icons[className].alt}\n                                />\n                                <span>{apps[app]}</span>\n                            </button>\n                        );\n                    })}\n                </div>\n                <Clock />\n            </div>\n            {openStart && (\n                <div className=\"start-cupboard visible\">\n                    <button className=\"shutdown\" onClick={e => shutDown(e)}>\n                        <img src={computer} alt=\"computer\" />\n                        <span>Shut Down...</span>\n                    </button>\n                </div>\n            )}\n        </Fragment>\n    );\n};\n\nStartBar.propTypes = {\n    openApp: PropTypes.func,\n    openApps: PropTypes.array,\n    shutDown: PropTypes.func,\n    start: PropTypes.func,\n    openStart: PropTypes.bool,\n    minimizedApps: PropTypes.array,\n    updateStartbar: PropTypes.func,\n    currentlyActiveApp: PropTypes.string\n};\n\nStartBar.defaultProps = {\n    openApp: () => {},\n    shutDown: () => {},\n    start: () => {},\n    updateStartbar: () => {},\n    openApps: [],\n    openStart: false,\n    minimizedApps: [],\n    currentlyActiveApp: \"\"\n};\n\nexport default StartBar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../css/toolbar.css\";\n\nconst Toolbar = ({\n    image,\n    title,\n    closeApp,\n    component,\n    updateStartbar,\n    notificationStyle\n}) => (\n    <div className=\"toolbar\">\n        {!notificationStyle && (\n            <button\n                className=\"button-small minimize\"\n                onClick={() => updateStartbar(component, true)}\n            >\n                _\n            </button>\n        )}\n        <button\n            className={`button-small ${notificationStyle ? \"disabled\" : \"\"}`}\n            onClick={closeApp.bind(null, component)}\n        >\n            ×\n        </button>\n        <div className=\"title\">\n            <img src={image} alt={image} /> <span>{title}</span>\n        </div>\n    </div>\n);\n\nToolbar.propTypes = {\n    image: PropTypes.string,\n    title: PropTypes.string,\n    closeApp: PropTypes.func,\n    component: PropTypes.string,\n    updateStartbar: PropTypes.func,\n    notificationStyle: PropTypes.bool\n};\n\nexport default Toolbar;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Linkify from 'react-linkify'\n\nconst Message = ({ type, content, user }) => (\n  <div className={`message ${type}`}>\n    <span className=\"username\">{`<${user}>`}</span>\n    <Linkify>\n      {content}\n    </Linkify>\n  </div>\n)\n\nMessage.propTypes = {\n  type: PropTypes.string,\n  content: PropTypes.string,\n  user: PropTypes.string\n}\n\nexport default Message\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ApiAiClient } from \"api-ai-javascript\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport {\n    apps,\n    icons,\n    dialogFlow,\n    initialResponse,\n    changeInputResponse\n} from \"../config\";\n\n// Components\nimport Draggable from \"react-draggable\";\nimport Toolbar from \"./toolbar\";\nimport Message from \"./message\";\n\nimport \"../css/messenger.css\";\n\nclass Messenger extends Component {\n    constructor() {\n        super();\n\n        // Create new bot client\n        this.client = new ApiAiClient({ accessToken: dialogFlow.token });\n\n        // Set all our base app details\n        this.state = {\n            chatHistory: [],\n            username: `Anon${Math.floor(Math.random() * (9999 - 1000) + 1000)}`,\n            botName: \"Gugi\",\n            isTyping: true,\n            inputValue: \"\",\n            curatedOptions: {\n                visible: false,\n                links: [\n                    \"Who are you?\",\n                    \"Can I see your work?\",\n                    \"What do you like to code in?\",\n                    \"I'd like to get in touch with you\"\n                ]\n            }\n        };\n    }\n\n    componentDidMount() {\n        // First message is doesn't come from bot so we can introduce the app to the user\n        setTimeout(() => {\n            this.triggerFirstMessage();\n        }, 2000);\n    }\n\n    componentDidUpdate({ openApps }) {\n        // Always keep messenger window scrolled to last message\n        if (openApps.indexOf(apps.messenger.toLowerCase()) !== -1)\n            this.messages.scrollTop = this.messages.scrollHeight;\n\n        this.messages.scrollTop = this.messages.scrollHeight;\n    }\n\n    // Called once on componentDidMount to say hi to the user\n    triggerFirstMessage = () => {\n        this.updateHistory(initialResponse, this.state.botName, true);\n        this.setState({\n            isTyping: false,\n            curatedOptions: {\n                ...this.state.curatedOptions,\n                visible: true\n            }\n        });\n    };\n\n    // This function listens to any response from the bot\n    handleResponse = response => {\n        const { result } = response;\n\n        // See what type of response the bot comes back with\n        const type = result.fulfillment.messages.map(message => {\n            if (message.speech && message.speech.length > 0) return \"single\";\n            if (message.payload) return \"multiple\";\n\n            return null;\n        });\n\n        // Change logic based on response type (multi-based response appears as multiple messages)\n        if (type.includes(\"multiple\")) {\n            const base = result.fulfillment.messages.find(item => item.payload)\n                .payload;\n            const responses = base.response;\n            let delay = 1000;\n\n            for (let i = 0; i < responses.length; i += 1) {\n                delay += i > 0 ? Math.floor(Math.random() * 2000) + 1000 : 0;\n\n                setTimeout(() => {\n                    this.updateHistory(responses[i], this.state.botName, true);\n\n                    // If we're on the last response, trigger next step\n                    if (i === responses.length - 1) {\n                        this.setState({ isTyping: false });\n\n                        // If user has curated options turned on, check for any new ones from the bot\n                        if (\n                            this.state.curatedOptions.visible &&\n                            base.moreOptions\n                        ) {\n                            this.setState({\n                                curatedOptions: {\n                                    visible: true,\n                                    links: base.moreOptions\n                                }\n                            });\n                        }\n                    }\n                }, delay);\n            }\n        } else {\n            this.updateHistory(\n                result.fulfillment.speech,\n                this.state.botName,\n                true\n            );\n            this.setState({ isTyping: false });\n        }\n    };\n\n    sendMessage = (event, directValue = null) => {\n        if (\n            (event && (event.keyCode === 13 || event.which === 13)) ||\n            directValue\n        ) {\n            const message = directValue || this.state.inputValue;\n\n            // Pass user message into state\n            this.updateHistory(message, this.state.username);\n\n            // Send user message to analytics\n            window.dataLayer.push({ event: \"dialogflow\", message });\n\n            // Send off to bot\n            this.setState({ isTyping: true, inputValue: \"\" }, () => {\n                this.client\n                    .textRequest(message)\n                    .then(this.handleResponse)\n                    .catch(this.handleError);\n            });\n        }\n    };\n\n    // Basic input function\n    handleInputChange = event => {\n        this.setState({ inputValue: event.target.value });\n    };\n\n    // Toggle for user to use preselected messages or type their own to the bot\n    changeInput = option => {\n        this.updateHistory(\n            changeInputResponse[option],\n            this.state.botName,\n            true\n        );\n\n        this.setState({\n            curatedOptions: {\n                ...this.state.curatedOptions,\n                visible: !this.state.curatedOptions.visible\n            }\n        });\n    };\n\n    // Basic error handling\n    handleError = () => {\n        this.setState({ isTyping: false });\n    };\n\n    // This is the final frontier. All message-based functions end with a call to this one\n    // It updates the local state with whatever argument was passed to it\n    updateHistory = (message, user, bot = false) => {\n        const { chatHistory } = this.state;\n\n        chatHistory.push({\n            user,\n            message,\n            bot\n        });\n\n        this.setState({ chatHistory });\n    };\n\n    render() {\n        const {\n            updateActiveApp,\n            closeApp,\n            updateStartbar,\n            openApps,\n            minimizedApps,\n            currentlyActiveApp,\n            previouslyActiveApp\n        } = this.props;\n\n        const {\n            chatHistory,\n            isTyping,\n            inputValue,\n            curatedOptions\n        } = this.state;\n\n        const messenger = apps.messenger.toLowerCase();\n        const dataView =\n            openApps.indexOf(messenger) === -1 ||\n            minimizedApps.indexOf(messenger) !== -1\n                ? \"closed\"\n                : \"\";\n\n        return (\n            <Draggable\n                defaultPosition={{\n                    x: Math.random() * (100 - 50) + 50,\n                    y: Math.random() * (100 - 50) + 50\n                }}\n                handle=\".toolbar\"\n            >\n                <div\n                    className={`\n              messenger\n              program\n              ${currentlyActiveApp === messenger ? \"active\" : \"\"}\n              ${previouslyActiveApp === messenger ? \"previous-active\" : \"\"}\n            `}\n                    onClick={updateActiveApp.bind(null, messenger)}\n                    data-view={dataView}\n                >\n                    <Toolbar\n                        closeApp={closeApp}\n                        updateStartbar={updateStartbar}\n                        component={messenger}\n                        image={icons[apps.messenger.toLowerCase()].url}\n                        title={apps.messenger}\n                    />\n\n                    <div\n                        className=\"messages content\"\n                        ref={input => {\n                            this.messages = input;\n                        }}\n                    >\n                        <TransitionGroup>\n                            {chatHistory.map((item, index) => (\n                                <CSSTransition\n                                    key={index}\n                                    timeout={500}\n                                    classNames=\"message\"\n                                >\n                                    <Message\n                                        key={index}\n                                        type={item.bot ? \"sent\" : \"received\"}\n                                        user={item.user}\n                                        content={item.message}\n                                    />\n                                </CSSTransition>\n                            ))}\n                        </TransitionGroup>\n                    </div>\n\n                    <span\n                        className={`activeTyping ${isTyping ? \"visible\" : \"\"}`}\n                    >\n                        Gugi is typing...\n                    </span>\n\n                    <div className={`userInput ${isTyping ? \"hidden\" : \"\"}`}>\n                        <div className=\"field\">\n                            {curatedOptions.visible ? (\n                                <div className=\"buttonWrapper\">\n                                    <div>\n                                        {curatedOptions.links.map(link => (\n                                            <button\n                                                key={link\n                                                    .replace(/\\s+/g, \"\")\n                                                    .toLowerCase()}\n                                                className=\"button-medium\"\n                                                onClick={() =>\n                                                    this.sendMessage(null, link)\n                                                }\n                                            >\n                                                {link}\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n                            ) : (\n                                <input\n                                    type=\"text\"\n                                    id=\"messageField\"\n                                    autoFocus\n                                    value={inputValue}\n                                    onChange={this.handleInputChange}\n                                    onKeyPress={this.sendMessage}\n                                />\n                            )}\n                        </div>\n                        <button\n                            onClick={() =>\n                                this.changeInput(\n                                    curatedOptions.visible ? \"free\" : \"options\"\n                                )\n                            }\n                            className=\"button-medium option-toggle\"\n                        >\n                            {curatedOptions.visible ? \"Free type\" : \"Curated\"}\n                        </button>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nMessenger.propTypes = {\n    updateActiveApp: PropTypes.func,\n    closeApp: PropTypes.func,\n    updateStartbar: PropTypes.func,\n    openApps: PropTypes.array,\n    minimizedApps: PropTypes.array,\n    currentlyActiveApp: PropTypes.string,\n    previouslyActiveApp: PropTypes.string\n};\n\nexport default Messenger;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n// Components\nimport Draggable from 'react-draggable'\nimport Toolbar from './toolbar'\n\nconst Program = (props) => {\n  return (\n    <Draggable\n      defaultPosition={props.notificationStyle\n        ? {}\n        : {x: Math.random() * (150 - 50) + 50, y: Math.random() * (150 - 50) + 50}\n      }\n      handle=\".toolbar\">\n      <div\n        className={`${props.programName.toLowerCase()} program txt-file ${props.currentlyActiveApp === props.programName.toLowerCase() ? 'active' : ''} ${props.previouslyActiveApp === props.programName.toLowerCase() ? 'previous-active' : ''} ${props.notificationStyle ? 'notification' : ''}`}\n        data-view={props.openApps.indexOf(props.programName.toLowerCase()) === -1 ? 'closed' : props.minimizedApps.indexOf(props.programName.toLowerCase()) !== -1 ? 'closed' : ''}\n        onClick={props.updateActiveApp.bind(null, props.programName.toLowerCase())}>\n        <Toolbar\n          closeApp={props.closeApp}\n          updateStartbar={props.updateStartbar}\n          component={props.programName.toLowerCase()}\n          image={props.programIcon}\n          title={`${props.programName} ${props.programRights ? props.programRights : ''}`}\n          notificationStyle={props.notificationStyle}\n        />\n        <div\n          className=\"content\"\n          contentEditable={props.contentEditable}\n          suppressContentEditableWarning>\n          {props.children}\n        </div>\n      </div>\n    </Draggable>\n  )\n}\n\nProgram.propTypes = {\n  programName: PropTypes.string.isRequired,\n  programIcon: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  programRights: PropTypes.string,\n  contentEditable: PropTypes.bool,\n  updateActiveApp: PropTypes.func,\n  closeApp: PropTypes.func,\n  updateStartbar: PropTypes.func,\n  openApps: PropTypes.array,\n  minimizedApps: PropTypes.array,\n  currentlyActiveApp: PropTypes.string,\n  previouslyActiveApp: PropTypes.string,\n  notificationStyle: PropTypes.bool\n}\n\nProgram.defaultProps = {\n  programRights: null,\n  contentEditable: false,\n  updateActiveApp: () => {},\n  closeApp: () => {},\n  updateStartbar: () => {},\n  openApps: [],\n  minimizedApps: [],\n  currentlyActiveApp: null,\n  previouslyActiveApp: null,\n  notificationStyle: false\n}\n\nexport default Program\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Linkify from \"react-linkify\";\nimport { apps, icons, work } from \"../config\";\n\n// Components\nimport Program from \"./program\";\n\nconst Work = ({\n    updateActiveApp,\n    updateStartbar,\n    closeApp,\n    openApps,\n    minimizedApps,\n    currentlyActiveApp,\n    previouslyActiveApp\n}) => (\n    <Program\n        programName={apps.work}\n        programRights=\"[Read Only]\"\n        programIcon={icons[apps.work.toLowerCase()].url}\n        updateActiveApp={updateActiveApp}\n        updateStartbar={updateStartbar}\n        closeApp={closeApp}\n        openApps={openApps}\n        minimizedApps={minimizedApps}\n        currentlyActiveApp={currentlyActiveApp}\n        previouslyActiveApp={previouslyActiveApp}\n    >\n        <Linkify>\n            {work.map((item, i) => (\n                <div key={i}>\n                    <h3>\n                        <a href={item.url}>{item.title}</a>\n                    </h3>\n                    <p>{item.copy}</p>\n                </div>\n            ))}\n        </Linkify>\n    </Program>\n);\n\nWork.propTypes = {\n    updateActiveApp: PropTypes.func,\n    updateStartbar: PropTypes.func,\n    closeApp: PropTypes.func,\n    openApps: PropTypes.array,\n    minimizedApps: PropTypes.array,\n    currentlyActiveApp: PropTypes.string,\n    previouslyActiveApp: PropTypes.string\n};\n\nexport default Work;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { apps, icons, contact } from \"../config\";\n\n// Components\nimport Program from \"./program\";\n\nconst Contact = ({\n    updateActiveApp,\n    closeApp,\n    updateStartbar,\n    openApps,\n    minimizedApps,\n    currentlyActiveApp,\n    previouslyActiveApp\n}) => {\n    return (\n        <Program\n            programName={apps.contact}\n            programIcon={icons[apps.contact.toLowerCase()].url}\n            contentEditable\n            updateActiveApp={updateActiveApp}\n            updateStartbar={updateStartbar}\n            closeApp={closeApp}\n            openApps={openApps}\n            minimizedApps={minimizedApps}\n            currentlyActiveApp={currentlyActiveApp}\n            previouslyActiveApp={previouslyActiveApp}\n        >\n            {contact.content}\n            <br />\n            <br />\n            ==========================================\n            <br />\n            <br />\n            <a href={contact.emailLink}>\n                {contact.emailLink.replace(\"mailto:\", \"\")}\n            </a>{\" \"}\n            <br />\n            <a href={contact.linkedin}>LinkedIn</a> <br />\n            <a href={contact.github}>GitHub</a> <br />\n        </Program>\n    );\n};\n\nContact.propTypes = {\n    updateActiveApp: PropTypes.func,\n    closeApp: PropTypes.func,\n    updateStartbar: PropTypes.func,\n    openApps: PropTypes.array,\n    minimizedApps: PropTypes.array,\n    currentlyActiveApp: PropTypes.string,\n    previouslyActiveApp: PropTypes.string\n};\n\nexport default Contact;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { apps, icons } from '../config'\n\n// Components\nimport Program from './program'\n\nconst ShutDown = ({ restart }) => (\n  <Program\n    currentlyActiveApp={apps.shutdown.toLowerCase()}\n    programName={apps.shutdown}\n    openApps={[apps.shutdown.toLowerCase()]}\n    programIcon={icons[apps.shutdown.toLowerCase()].url}\n    notificationStyle\n  >\n    It is now safe to turn off your computer.\n    <br />\n    <br />\n    <button className=\"button-medium\" onClick={restart}>Restart</button>\n  </Program>\n)\n\nShutDown.propTypes = {\n  restart: PropTypes.func.isRequired\n}\n\nexport default ShutDown\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { apps, icons, resumeLink } from \"./config\";\nimport StartBar from \"./components/startbar\";\nimport Messenger from \"./components/messenger\";\nimport Work from \"./components/work\";\nimport Contact from \"./components/contact\";\nimport ShutDown from \"./components/shutDown\";\n\nimport resume from \"./images/3d_glasses.svg\";\n\nconst programComponents = {\n    chat: Messenger,\n    work: Work,\n    contact: Contact\n};\n\nclass App extends Component {\n    state = {\n        shutDown: false,\n        openApps: [apps.messenger.toLowerCase()],\n        minimizedApps: [],\n        openStart: false,\n        currentlyActiveApp: apps.messenger.toLowerCase(),\n        previouslyActiveApp: \"\"\n    };\n\n    componentDidMount() {\n        if (document.addEventListener) {\n            document.addEventListener(\"click\", this.linkClickListener, false);\n        } else {\n            document.attachEvent(\"onclick\", this.linkClickListener);\n        }\n    }\n\n    linkClickListener = e => {\n        var event = window.e || e;\n\n        if (event.target.tagName === \"A\") {\n            this.openInNewTab(event.target.href);\n        }\n    };\n\n    openApp = (e, component) => {\n        e.preventDefault();\n\n        const { openApps, minimizedApps } = this.state;\n        openApps.push(component);\n\n        if (minimizedApps.indexOf(component) > -1) {\n            for (let i = minimizedApps.length - 1; i >= 0; i--) {\n                if (minimizedApps[i] === component) {\n                    minimizedApps.splice(i, 1);\n                }\n            }\n        }\n\n        this.setState({ openApps, minimizedApps });\n\n        this.updateActiveApp(component);\n\n        this.start(\"close\");\n    };\n\n    closeApp = (component, e) => {\n        e.preventDefault();\n\n        let openApps = this.state.openApps;\n        openApps = openApps.filter(e => e !== component);\n\n        this.setState({ openApps });\n    };\n\n    updateStartbar = (component, minimizeWindow) => {\n        const minimizedApps = this.state.minimizedApps;\n\n        if (minimizeWindow) {\n            // if we manually ask to minimize\n            minimizedApps.push(component);\n        } else if (this.state.minimizedApps.indexOf(component) > -1) {\n            // if app is currently minimized and needs to be brought back\n            const index = minimizedApps.indexOf(component);\n            minimizedApps.splice(index, 1);\n\n            this.updateActiveApp(component, null);\n        } else {\n            // Otherwise, let's just set to currently active app\n            this.updateActiveApp(component, null);\n        }\n\n        this.setState({ minimizedApps });\n        this.start(\"close\");\n    };\n\n    updateActiveApp = (component, e) => {\n        if (e) e.preventDefault();\n\n        if (component === this.state.updateActiveApp) return;\n\n        this.setState({ previouslyActiveApp: this.state.currentlyActiveApp });\n        this.setState({ currentlyActiveApp: component });\n    };\n\n    start = status => {\n        if (status === \"close\") this.setState({ openStart: false });\n        else this.setState({ openStart: true });\n    };\n\n    openInNewTab = elem => {\n        const win = window.open(elem, \"_blank\");\n\n        if (win) win.focus();\n    };\n\n    shutDown = (e, restart = false) => {\n        if (e) e.preventDefault();\n\n        this.setState({\n            shutDown: restart ? false : true,\n            openStart: false,\n            openApps: [],\n            minimizedApps: [],\n            currentlyActiveApp: \"\",\n            previouslyActiveApp: \"\"\n        });\n    };\n\n    render() {\n        const {\n            openApps,\n            minimizedApps,\n            currentlyActiveApp,\n            previouslyActiveApp,\n            openStart,\n            shutDown\n        } = this.state;\n\n        return (\n            <section className=\"desktop\">\n                <div className=\"icons\">\n                    <button\n                        className=\"tooltip\"\n                        onClick={e =>\n                            this.openApp(e, apps.messenger.toLowerCase())\n                        }\n                    >\n                        <img\n                            src={icons[apps.messenger.toLowerCase()].url}\n                            alt={icons[apps.messenger.toLowerCase()].alt}\n                        />{\" \"}\n                        <span className=\"tooltiptext\">Chat</span>\n                    </button>\n                    <button\n                        className=\"tooltip\"\n                        onClick={e =>\n                            this.openApp(e, apps.contact.toLowerCase())\n                        }\n                    >\n                        <img\n                            src={icons[apps.contact.toLowerCase()].url}\n                            alt={icons[apps.contact.toLowerCase()].alt}\n                        />{\" \"}\n                        <span className=\"tooltiptext\">Contact</span>\n                    </button>\n                    <button\n                        className=\"tooltip\"\n                        onClick={e => this.openApp(e, apps.work.toLowerCase())}\n                    >\n                        <img\n                            src={icons[apps.work.toLowerCase()].url}\n                            alt={icons[apps.work.toLowerCase()].alt}\n                        />{\" \"}\n                        <span className=\"tooltiptext\">Work</span>\n                    </button>\n                    <a\n                        className=\"tooltip\"\n                        href={resumeLink}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        <img src={resume} alt=\"Icon of resume\" />\n                        <span className=\"tooltiptext\">Resume</span>\n                    </a>\n                </div>\n\n                {Object.keys(programComponents).map((program, i) => {\n                    if (\n                        openApps.indexOf(program) === -1 &&\n                        minimizedApps.indexOf(program) === -1\n                    )\n                        return null;\n\n                    const ProgramBlock = programComponents[program];\n\n                    return (\n                        <ProgramBlock\n                            key={i}\n                            updateActiveApp={this.updateActiveApp}\n                            closeApp={this.closeApp}\n                            updateStartbar={this.updateStartbar}\n                            openApps={openApps}\n                            minimizedApps={minimizedApps}\n                            currentlyActiveApp={currentlyActiveApp}\n                            previouslyActiveApp={previouslyActiveApp}\n                        />\n                    );\n                })}\n\n                <StartBar\n                    openApp={this.openApp}\n                    updateActiveApp={this.updateActiveApp}\n                    currentlyActiveApp={currentlyActiveApp}\n                    openApps={openApps}\n                    minimizedApps={minimizedApps}\n                    shutDown={this.shutDown}\n                    updateStartbar={this.updateStartbar}\n                    start={this.start}\n                    openStart={openStart}\n                />\n\n                <div className={`shutDownPage ${shutDown ? \"visible\" : \"\"}`}>\n                    <ShutDown restart={() => this.shutDown(null, true)} />\n                </div>\n                <div className=\"logo\" />\n            </section>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/normalize.css'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}